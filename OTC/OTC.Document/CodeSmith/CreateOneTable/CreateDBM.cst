<%-- 
Name:代码生成 
Author:yzh 
Description: 
--%>
<%@ CodeTemplate Inherits="CodeTemplate" Language="C#" TargetLanguage="Text" Description="NetTiers main template." Debug="True" ResponseEncoding="UTF-8"%>

<%@ Register Name="Utility" Template="Utility.cst" MergeProperties="true" ExcludeProperties="" Debug="true"%>
<%-- 注册Model模板 --%>
<%@ Register Name="Model" Template="Model.cst" MergeProperties="Flase" ExcludeProperties=""%>
<%-- 注册Repository模板 --%>
<%@ Register Name="Repository" Template="Repository.cst" MergeProperties="Flase" ExcludeProperties=""%>
<%-- 注册IRepository模板 --%>
<%@ Register Name="IRepository" Template="IRepository.cst" MergeProperties="Flase" ExcludeProperties=""%>
<%-- 注册Service模板 --%>
<%@ Register Name="Service" Template="Service.cst" MergeProperties="Flase" ExcludeProperties=""%>
<%-- 数据库 --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" DeepLoad="True" Optional="False" Category="01. Getting Started - Required" Description="Database that the tables views, and stored procedures should be based on. IMPORTANT!!! If SourceTables and SourceViews are left blank, the Entire Database will then be generated."%>
<%
this.GenerateModelClasses(); //Model
this.GenerateRepositoryClasses(); //Repository
this.GenerateIRepositoryClasses(); //IRepository
this.GenerateServiceClasses(); //Service

Debug.WriteLine("OK");//输出调试信息
%>
<script runat="template">

    //生成Model类
    private void GenerateModelClasses()
    {
        CodeTemplate Template =new Model();
        foreach(TableSchema table in this.SourceDatabase.Tables) //循环所有数据表
        {
           if(utility.CheckTable(table.Name))
           {
                string FileDirectory = OutputDirectory +"\\"+"Model\\"+utility.GetSpaceName(table.Name) +"\\"+ utility.GetTableName(table.Name) +".cs";//文件路径及类名
                //生成模板
                Template.SetProperty("Table",table);
                //文件输出
                Template.RenderToFile(FileDirectory,true);
                Debug.WriteLine(FileDirectory +" 创建成功.");
            }
        }
    }
    
    //生成Repository类
    private void GenerateRepositoryClasses()
    {
        CodeTemplate Template =new Repository();
        foreach(TableSchema table in this.SourceDatabase.Tables) //循环所有数据表
        {
           if(utility.CheckTable(table.Name))
           {
            string FileDirectory = OutputDirectory +"\\"+"Repository\\"+utility.GetSpaceName(table.Name) +"\\"+ utility.GetTableName(table.Name) +"Repository.cs";//文件路径及类名
            //生成模板
            Template.SetProperty("Table",table);
            //文件输出
            Template.RenderToFile(FileDirectory,true);
            Debug.WriteLine(FileDirectory +" 创建成功.");
           }
        }
    }
    
    //生成IRepository类
    private void GenerateIRepositoryClasses()
    {
        CodeTemplate Template =new IRepository();
        foreach(TableSchema table in this.SourceDatabase.Tables) //循环所有数据表
        {
            if(utility.CheckTable(table.Name))
           {
            string FileDirectory = OutputDirectory +"\\"+"IRepository\\"+utility.GetSpaceName(table.Name) +"\\I"+ utility.GetTableName(table.Name) +"Repository.cs";//文件路径及类名
            //生成模板
            Template.SetProperty("Table",table);
            //文件输出
            Template.RenderToFile(FileDirectory,true);
            Debug.WriteLine(FileDirectory +" 创建成功.");
           }
        }
    }
    
    //生成Service类
    private void GenerateServiceClasses()
    {
        CodeTemplate Template =new Service();
        foreach(TableSchema table in this.SourceDatabase.Tables) //循环所有数据表
        {
            if(utility.CheckTable(table.Name))
           {
            string FileDirectory = OutputDirectory +"\\"+"Service\\"+utility.GetSpaceName(table.Name) +"\\"+ utility.GetTableName(table.Name) +"Service.cs";//文件路径及类名
            //生成模板
            Template.SetProperty("Table",table);
            //文件输出
            Template.RenderToFile(FileDirectory,true);
            Debug.WriteLine(FileDirectory +" 创建成功.");
           }
        }
    }
    
    
</script>

<script runat="template">
Utility utility = new Utility();
    //解决方案输出路径
private string Directory = String.Empty;
    
    [Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
    [Optional, NotChecked]
    [DefaultValue("")]
    public string OutputDirectory 
    { 
        get
        {
            return Directory;
        }
        set
        {
            if (value.EndsWith("\\")) value = value.Substring(0, value.Length -1);
            Directory = value;
        } 
    }
</script>
